<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Summary | 星尘的Blog]]></title>
  <link href="http://blog.konglh.com/blog/categories/summary/atom.xml" rel="self"/>
  <link href="http://blog.konglh.com/"/>
  <updated>2012-07-23T23:55:36+08:00</updated>
  <id>http://blog.konglh.com/</id>
  <author>
    <name><![CDATA[星尘]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[基于 GitHub + Octopress 搭建博客系统]]></title>
    <link href="http://blog.konglh.com/blog/2012/07/23/ji-yu-github-plus-octopress-da-jian-zi-ji-de-bo-ke-xi-tong/"/>
    <updated>2012-07-23T03:19:00+08:00</updated>
    <id>http://blog.konglh.com/blog/2012/07/23/ji-yu-github-plus-octopress-da-jian-zi-ji-de-bo-ke-xi-tong</id>
    <content type="html"><![CDATA[<h2>缘起</h2>

<p>据说每一个使用<a href="http://octopress.com/" title="Octopress">Octopress</a>写博客的码农，第一篇博客必然是讨论Octopress本身，既在江湖混，咱也遵循江湖规矩。</p>

<p>使用<a href="https://pages.github.com/" title="GitHub Pages">GitHub Pages</a>和Octopress搭建自己的博客系统在近期技术圈非常的流行。用Git写Blog~~~一听就酷得没边了，再加上<a href="https://github.com/" title="GitHub">GitHub</a>和<a href="http://daringfireball.net/projects/markdown/" title="MarkDown">MarkDown</a>，绝对的码农神器。</p>

<p>加上自己之前在乱七八糟的地方都是写几篇就不玩了，最后甚至连博客帐号都忘了。。。这次痛下决心，自己老老实实整一个，即使不写了，也还在GitHub里。</p>

<!-- more -->


<h2>简介</h2>

<p>整个系统基于官方的分支，主要针对自己的习惯做了以下定制：</p>

<ul>
<li>修改Octopress使Category能完美的支持中文</li>
<li>根据Octopress的Category，加了一个类似的Tag机制</li>
<li>在sidebar加入Category列表和Tag Cloud机制</li>
<li>加入对<a href="http://www.jiathis.com/" title="加网">JiaThis</a>和<a href="http://www.duoshuo.com/" title="多说">多说</a>的支持</li>
</ul>


<h4>说明</h4>

<p>其实Category在Octopress里面本身就是传统意义上的tag机制，不过个人依然比较喜欢传统的目录机制，所以分成两个，一个用来表示目录，一个用来表示Tag。然后我写的时候每篇文章只属于一个Category，但是会有多个Tag。</p>

<p>分享和评论部分也可以使用<a href="http://www.disqus.com/" title="Disqus">Disqus</a>、<a href="http://www.duoshuo.com/" title="友言">友言</a>， 友言的好处是支持缩进式评论，缺点是在我这儿加载比较慢，ui也不太符合我的口味。另外JiaThis和Octopress的Video模块有冲突，会造成分享那儿有个小小的flash框，视觉上超级不爽。最后我直接修改js跳过了对JiaThis Object的处理</p>

<p>整个过程中参考了<a href="http://mrzhang.me">http://mrzhang.me</a>和<a href="https://github.com/tokkonopapa/octopress-tagcloud">https://github.com/tokkonopapa/octopress-tagcloud</a>的定制。</p>

<h2>安装</h2>

<h3>1. 准备</h3>

<h4>必须</h4>

<ul>
<li>一个方便使用Git, ruby, vim的系统，Linux/Mac OS X都不错，用windows的就自觉点安个虚拟机</li>
<li>注册一个<a href="https://github.com/signup/free">GitHub</a>帐号，新建一个空的Repository。如果你准备用自己的域名的话，Repository的名称可以随便取。另外，GitHub提供二级域名，如果要使用二级域名，必须把Repository取名为 你的GitHub帐号名.github.com，而且这样同时也能支持你的个人域名</li>
</ul>


<h4>可选</h4>

<ul>
<li>一个多说或者Disqus、友言的帐号，用于管理你的评论系统</li>
<li>如果想用自己的域名，把source/CNAME文件内的域名改成你的域名，并且把该域名的A Record指向IP：207.97.227.245，域名和CNAME文件的内容必须完全一致。比如我把我的域名 blog.konglh.com指过来了，那么CNAME里面必须写blog.konglh.com，不能只写主域名</li>
</ul>


<h3>2. 安装ruby</h3>

<p>参考文档：<a href="http://octopress.org/docs/setup/rvm/">http://octopress.org/docs/setup/rvm/</a></p>

<h4>为当前用户安装rvm</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bash -s stable &amp;lt; &amp;lt;<span class="o">(</span>curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>将rvm加入你的shell环境</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;[[ -s &quot;$HOME/.rvm/scripts/rvm&quot; ]] &amp;amp;&amp;amp; . &quot;$HOME/.rvm/scripts/rvm&quot; # Load RVM function&#39;</span> &gt;&gt; ~/.bash_profile
</span><span class='line'><span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>安装RVM</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm install 1.9.3 &amp;amp;&amp;amp; rvm use 1.9.3  <span class="c"># Octopress required that rvm version &gt;= 1.9.2</span>
</span><span class='line'>rvm rubygems latest
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>3. 安装Octopress</h3>

<p>以下的安装均基于本人定制过的分支</p>

<h4>下载Octopress</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/psaux/octopress.git -b konglh
</span><span class='line'><span class="nb">cd </span>octopress    <span class="c"># If you use RVM, You&#39;ll be asked if you trust the .rvmrc file (say yes).</span>
</span><span class='line'>ruby --version  <span class="c"># Should report Ruby 1.9.3 or 1.9.2 if you install 1.9.2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>安装依赖</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>安装默认主题</h4>

<p>目前我是直接修改的默认主题，所以安装方法一致。其实这步就是把.themes/classic/内的两个目录复制到项目根目录
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake install
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>它其实类似于两条命令的合体，如果你修改主题，需要了解这两个命令，如果不想改，无视这儿就好。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake update_source<span class="o">[</span><span class="s1">&#39;classic&#39;</span><span class="o">]</span>
</span><span class='line'>rake update_style<span class="o">[</span><span class="s1">&#39;classic&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>4. 修改个人配置</h3>

<p>所有配置项都在_config.yml文件，改成你的数据即可，所有的配置都有注释，一看就懂。</p>

<p>到现在，你已经可以在本地测试了，</p>

<h3>5. 创建文章并本地测试</h3>

<p>现在我们可以验证我们的本地系统已经能正常工作。
另外，以后我们码字时，可以先在本地起一个服务，预览无误后再部署</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_post<span class="o">[</span>‘article name’<span class="o">]</span> <span class="c"># 按照[]中的名字生成一篇新的文章，然后修改生成的文件即可</span>
</span><span class='line'>rake generate   <span class="c"># Generates posts and pages into the public directory</span>
</span><span class='line'>rake watch      <span class="c"># Watches source/ and sass/ for changes and regenerates</span>
</span><span class='line'>rake preview    <span class="c"># Watches, and mounts a webserver at http://localhost:4000</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中<code>rake new_post</code>生成的文章在 soure/_posts目录下，Octopress会根据当前日期和输入的文章标题自动命名，s生成文件的路径名会显示终运行结果中。形如：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post['test']
</span><span class='line'>mkdir -p source/&lt;em>posts
</span><span class='line'>Creating new post: source/&lt;/em>posts/2012-07-23-test.markdown</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>运行 <code>rake preview</code> 后，你就可以使用<a href="http://localhost:4000">http://localhost:4000</a>访问你的本地博客了。</p>

<h3>6. 连接GitHub</h3>

<p><strong>注意</strong>：如果用自己的域名，记得把source/CNAME文件内的域名改成你的域名</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>它会提示你输入有读写权限的Repository Url，这个在你的GitHub为Blog建立的这个Repository上可以找到。Url形如：git@github.com:[Username]/[Repository].git</p>

<h3>7. 部署</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>当看到“Github Pages deploy complete”后，就表示部署大功告成。注意GitHub会过一段时间才能给你生成，所以不要急，等个几分钟再看。如果是用的自定义域名的话，第一次的时间会更久，可能会到小时级。</p>

<p><strong>Tips</strong>：Octopress提供的所有rake方法，可以运行<code>rake -T</code>查看。</p>

<h3>8. 备份</h3>

<p>既然使用了GitHub，我们的文章自然要用它管理起来，不然太浪费了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd source/_posts/
</span><span class='line'>git init
</span><span class='line'>touch README.md
</span><span class='line'>git add *
</span><span class='line'>git commit -m 'first commit'
</span><span class='line'>git remote add origin git@github.com:[Username]/[Repository].git</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>_posts目录是Octopress里文章的默认保存目录。commit即可，无需push。接下来我们创建并切换到备份分支store，名字根据你的兴趣随便取，以后我们就使用这个分支管理我们的文章，整个流程如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout -b store
</span><span class='line'>git add *.markdown
</span><span class='line'>git commit -m <span class="s1">&#39;backup&#39;</span>
</span><span class='line'>git push origin store
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Over</h2>
]]></content>
  </entry>
  
</feed>
